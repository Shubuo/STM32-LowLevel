#include "stm32f10x.h"

int main() 
{
//void EXS03_initGPIO(void)
  GPIO_InitTypeDef GPIO_InitStructure;
    /* GPIOA-GPIOC Periph clock enable */
#ifdef STM32F10X_MD
    /* GPIOA-GPIOC Periph clock enable */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);  // LED, BUTTON GPIO
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);  // LCD GPIO
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);  // LED, BUTTON, BUZZER GPIO
#elif STM32F2XX
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);  // LED, BUTTON GPIO
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);  // LCD GPIO
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);  // LED, BUTTON, BUZZER GPIO
#endif
    /*
    *********LED1->PA0, LED2->PA1, LED3-> PC2,   LED4 -> PC3 *********
    */
#ifdef STM32F2XX
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 | GPIO_Pin_1 ;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 		//Output
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; 		// ve PushPull
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_2 | GPIO_Pin_3;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; 		//Output
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; 		// ve PushPull
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOC, &GPIO_InitStructure);
}

#define HSE_VALUE    ((uint32_t)8000000)	
 
//void delay_init(void)
  RCC_ClocksTypeDef RCC_ClocksStatus;
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);  /* HCLK/8 */  
  SysTick_ITConfig(DISABLE);
  delay_fac_us = RCC_ClocksStatus.HCLK_Frequency / 8000000;	// 8Mhz Kristal için
  delay_fac_ms = RCC_ClocksStatus.HCLK_Frequency / 8000;    // 8Mhz Kristal için  


 while(1)
{
/**
  * @brief  Sets the selected data port bits.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
	void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
	{
		/* Check the parameters */
		assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
		assert_param(IS_GPIO_PIN(GPIO_Pin));
		
		GPIOx->BSRR = GPIO_Pin;
	}

	void delay_ms(uint16_t nms)
		 uint32_t temp = delay_fac_ms * nms;

			if (temp > 0x00ffffff)
			{
					temp = 0x00ffffff;
			}
			SysTick_SetReload(temp);		             
			SysTick_CounterCmd(SysTick_Counter_Clear);	 
			SysTick_CounterCmd(SysTick_Counter_Enable);	 
			do
			{
					Status = SysTick_GetFlagStatus(SysTick_FLAG_COUNT);
			}while (Status != SET);				         
			SysTick_CounterCmd(SysTick_Counter_Disable); 
	SysTick_CounterCmd(SysTick_Counter_Clear);	 
	}
}

